From 0a7689c6f467f5cc128a3d0fba3a6bed614226f0 Mon Sep 17 00:00:00 2001
From: Arihaan <arihaansnegi@gmail.com>
Date: Sat, 3 Sep 2022 03:17:06 +0300
Subject: [PATCH] Create Patch File

---
 client3.py     | 16 +++++++++++-----
 client_test.py | 25 +++++++++++++++++++++++--
 2 files changed, 34 insertions(+), 7 deletions(-)

diff --git a/client3.py b/client3.py
index f1771c3..21de378 100644
--- a/client3.py
+++ b/client3.py
@@ -29,31 +29,37 @@ QUERY = "http://localhost:8080/query?id={}"
 # 500 server request
 N = 500
 
+
 def getDataPoint(quote):
 	""" Produce all of the needed values to generate a datapoint """
 	""" ------------- Update this function ------------- """
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price)/2
 	return stock, bid_price, ask_price, price
 
+
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if price_b:
+		return price_a/price_b
+
 
 # Main
 if __name__ == "__main__":
 
 	# Query the price once every N seconds.
-	for _ in iter(range(N)):
+	for _ in range(N):
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
 		""" ----------- Update to get the ratio --------------- """
+		prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+			prices[stock] = price
+			print(f"Quoted {stock} at (bid:{bid_price}, ask:{ask_price}, price:{price})")
 
-		print ("Ratio %s" % getRatio(price, price))
+		print(f"Ratio {getRatio(prices['ABC'], prices['DEF'])}")
diff --git a/client_test.py b/client_test.py
index af2bf26..7168ca8 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,24 +1,45 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
+
 
 class ClientTest(unittest.TestCase):
+
   def test_getDataPoint_calculatePrice(self):
     quotes = [
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 123.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
 
   """ ------------ Add more unit tests ------------ """
 
+  def test_getRatio_calculateRatio(self):
+    prices = [
+      {'price_a': 110.11, 'price_b': 120.48},
+      {'price_a': 121.68, 'price_b': 113.92}
+    ]
+    for price in prices:
+      self.assertEqual(getRatio(price['price_a'], price['price_b']), price['price_a']/price['price_b'])
+
+  def test_getRatio_calculateRatioWhenZero(self):
+    prices = [
+      {'price_a': 120.53, 'price_b': 0},
+      {'price_a': 117.69, 'price_b': 0}
+    ]
+    for price in prices:
+      self.assertEqual(getRatio(price['price_a'], price['price_b']), None)
 
 
 if __name__ == '__main__':
-- 
2.32.1 (Apple Git-133)

